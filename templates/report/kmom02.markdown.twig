Kmom02
=====



Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP

Med arv kan man skapa en subklass som ärver metoder och properites ifrån en basklass och har en "is a" relation vilket är en stark koppling och subklassen kan inte existera utan basklassen som den äver ifrån.
Metoderna och properties som subklassen ärver kan man sedan göra om för den specifika subklassen men fördelen är att man inte behöver skriva en helt ny klass utan kan ärva själva mallen från en basklassen.

Med komposition och aggregation är två olika typer av relationsförhållanden mellan olika klasser där komposition är en stark koppling mellan klasserna "has a", tex så skulle ett hus vara en klass och rummen vara subklassser med en komposition, utan huset finns inte rummen.
Medans aggregation har en lösare koppling, åter om hus klassen rivs så skulle hyregästerna fortfarande existera.

Trait är likt ett multipelt arv där kodmoduler kan återanvändas i flera olika klasser där klasser "uses" ett trait.

interface är ett "kontrakt" där en klass kan erbjuda en uppsättning av metoder och properties.

Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?

Jag är någolunda nöjd med uppgiften, det känns som det finns mycket spelrum kvar att utöka korten, tex var jag inne på att skapa kort med mer trovärdig framsida, implementera bilder etc för varje kortfärg men det fick jag banta bort i tidsaspektsyfte.
Det känns som jag har fått med allt efter de grundkraven som är givna

Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?

Det var inte något jag valde att göra, men jag kan se nyttan att använda flödesdiagram med psuedokod vid planeringsstadiet innan man börjar koda.

Vilken är din TIL för detta kmom?

Att inte grotta ned sig för mycket i detaljer och försöker få ut kod som fungerar efter grundkraven.

